{
  "add-package-name-and-init-method": {
    "prefix": [
      "go",
      "go-add-package-name-and-init-method",
      "go-apbaim"
    ],
    "body": [
      "package ${TM_DIRECTORY/^.+\\/(.)(.*)$/$1$2/}",
      "",
      "import (",
      "  \"fmt\"",
      ")",
      "",
      "func init() {",
      "  fmt.Printf(\"Func='%#+v'\\\\n\", \"${TM_DIRECTORY/^.+\\/(.)(.*)$/${1:/upcase}$2/}\")",
      "",
      "\t${0}",
      "}",
      ""
    ]
  },
  "if-err-not-nil-with-else-if-value-not-nil": {
    "prefix": [
      "go",
      "go-if-err-not-nil-with-else-if-value-not-nil",
      "go-giennweivnn"
    ],
    "body": [
      "if err != nil {",
      "\tfmt.Fprintf(os.Stderr, \"error:  call to ${1:func_name} errored  - ${2:func_call_result_variable_name}=%#+v, err=%#+v\\n\", ${2:func_call_result_variable_name}, err)",
      "} else if ${2:func_call_result_variable_name} == nil {",
      "\tfmt.Fprintf(os.Stderr, \"error: call to ${1:func_name} returned nil - ${2:func_call_result_variable_name}=%#+v\\n\", ${2:func_call_result_variable_name})",
      "}",
      "",
      "$0"
    ],
    "description": "Snippet for checking if err is nil or `val` is nil in a call to, say, `\tvar val interface{} = nil\r\n\tbytes, err := json.Marshal(val)\r\n\tif err != nil {\r\n\t\tfmt.Fprintf(os.Stderr, \"error: json.Marshal(val=%#+v) returned an error - bytes=%#+v, err=%#+v\\n\", val, bytes, err)\r\n\t} else if val == nil {\r\n\t\tfmt.Fprintf(os.Stderr, \"error: json.Marshal(val=%#+v) did not populate val - bytes=%#+v\\n\", val, bytes)\r\n\t}`"
  },
  "new-constructor": {
    "prefix": [
      "go",
      "go-new-constructor",
      "go-nc"
    ],
    "body": [
      "// New${1:Type} ${4|\u200B,...|}.",
      "func New${1:Type}($2) *$1 {",
      "  return &$1{",
      "    $3",
      "  }",
      "}",
      "",
      "${0}"
    ]
  },
  "struct-field": {
    "prefix": [
      "go",
      "go-struct-field",
      "go-sf"
    ],
    "body": [
      "// $1 ${4|\u200B,...|}.",
      "${1:FieldName} ${2:Type}$0"
    ]
  },
  "struct-field-with-json-tag": {
    "prefix": [
      "go",
      "go-struct-field-with-json-tag",
      "go-sfj"
    ],
    "body": [
      "// $1 ${4|\u200B,...|}.",
      "${1:FieldName} ${2:Type} `json:\"${1/(.*)/${1:/downcase}/}${3|\",\\,|}`${0}"
    ]
  },
  "struct-field-with-yaml-tag": {
    "prefix": [
      "go",
      "go-struct-field-with-yaml-tag",
      "go-sfy"
    ],
    "body": [
      "// $1 ${4|\u200B,...|}.",
      "${1:FieldName} ${2:Type} `yaml:\"${1/(.*)/${1:/downcase}/}${3|\",\\,|}`${0}"
    ]
  },
  "struct-field-tag": {
    "prefix": [
      "go",
      "go-struct-field-tag",
      "go-tagj"
    ],
    "body": [
      "`${1:tag_name}:\"${1:/downcase}\"`$0"
    ]
  },
  "new-test-function-with-stretchr-testify-require": {
    "prefix": [
      "go",
      "go-new-test-function-with-stretchr-testify-require"
    ],
    "body": [
      "",
      "import (",
      "  \"testing\"",
      "  \"github.com/stretchr/testify/require\"",
      ")",
      "",
      "func Test_${TM_DIRECTORY/^.+\\/(.*)$/$1/}_${2:FuncName}(t *testing.T) {",
      "  ${1|require := require.New(t),t.Parallel()\nrequire := require.New(t)|}",
      "",
      "  require.Equal(true, false, \"TODO(${3:NO_ASSIGNEE_FOR_TODO}): ${2:FuncName} intentional failure as it needs implementing\")",
      "}",
      "",
      "$0"
    ],
    "description": "Snippet for new test function using `github.com/stretchr/testify/require`"
  },
  "stretchr-testify-require-equal": {
    "prefix": [
      "go",
      "go-testify-require-equal"
    ],
    "body": [
      "require.Equal(${1:expected}, ${2:actual})",
      "$0"
    ]
  },
  "stretchr-testify-require-noerror": {
    "prefix": [
      "go",
      "go-testify-require-noerror"
    ],
    "body": [
      "require.NoError(${1:err})",
      "$0"
    ]
  },
  "stretchr-testify-require-notnil": {
    "prefix": [
      "go",
      "go-stretchr-testify-require-notnil"
    ],
    "body": [
      "require.NotNil(${1:result})",
      "$0"
    ]
  },
  "stretchr-testify-require-notnilf": {
    "prefix": [
      "go",
      "go-stretchr-testify-require-notnilf"
    ],
    "body": [
      "require.NotNil(${1:result}, \"testing.t.Name()=%#+v, ${1:result}=%s\", t.Name(), ${1:result})",
      "$0"
    ]
  },
  "stretchr-testify-require-equalerror": {
    "prefix": [
      "go",
      "go-stretchr-testify-require-equalerror"
    ],
    "body": [
      "require.EqualError(${1:actual_error}, `${0:expected_error_string}`)",
      "$0"
    ]
  },
  "stretchr-testify-require-noerror-and-stretchr-testify-require-notnil": {
    "prefix": [
      "go",
      "go-stretchr-testify-require-noerror-and-stretchr-testify-require-notnil"
    ],
    "body": [
      "require.NoError(${1:err})",
      "require.NotNil(${2:result})",
      "$0"
    ]
  },
  "new-test-function-with-stretchr-testify-assert": {
    "prefix": [
      "go",
      "go-new-test-function-with-stretchr-testify-assert"
    ],
    "body": [
      "",
      "import (",
      "  \"testing\"",
      "  \"github.com/stretchr/testify/assert\"",
      ")",
      "",
      "func Test_${TM_DIRECTORY/^.+\\/(.*)$/$1/}_${2:FuncName}(t *testing.T) {",
      "  ${1|assert := assert.New(t),t.Parallel()\nassert := assert.New(t)|}",
      "",
      "  assert.Equal(true, false, \"TODO(${3:NO_ASSIGNEE_FOR_TODO}): ${2:FuncName} intentional failure as it needs implementing\")",
      "}",
      "",
      "$0"
    ],
    "description": "Snippet for Test function with assert"
  },
  "stretchr-testify-assert-equal": {
    "prefix": [
      "go",
      "go-testify-assert-equal"
    ],
    "body": [
      "assert.Equal(${1:expected}, ${2:actual})",
      "$0"
    ]
  },
  "stretchr-testify-assert-noerror": {
    "prefix": [
      "go",
      "go-testify-assert-noerror"
    ],
    "body": [
      "assert.NoError(${1:err})",
      "$0"
    ]
  },
  "stretchr-testify-assert-notnil": {
    "prefix": [
      "go",
      "go-stretchr-testify-assert-notnil"
    ],
    "body": [
      "assert.NotNil(${1:result})",
      "$0"
    ]
  },
  "stretchr-testify-assert-notnilf": {
    "prefix": [
      "go",
      "go-stretchr-testify-assert-notnilf"
    ],
    "body": [
      "assert.NotNil(${1:result}, \"testing.t.Name()=%#+v, ${1:result}=%s\", t.Name(), ${1:result})",
      "$0"
    ]
  },
  "stretchr-testify-assert-equalerror": {
    "prefix": [
      "go",
      "go-stretchr-testify-assert-equalerror"
    ],
    "body": [
      "assert.EqualError(${1:actual_error}, `${0:expected_error_string}`)",
      "$0"
    ]
  },
  "stretchr-testify-assert-noerror-and-stretchr-testify-assert-notnil": {
    "prefix": [
      "go",
      "go-stretchr-testify-assert-noerror-and-stretchr-testify-assert-notnil"
    ],
    "body": [
      "assert.NoError(${1:err})",
      "assert.NotNil(${2:result})",
      "$0"
    ]
  },
  "testing.skipf": {
    "prefix": [
      "go",
      "go-testing.skipf"
    ],
    "body": [
      "t.Skipf(\"Skipping: testing.t.Name()='%#+v', reason='TODO(${1:NO_ASSIGNEE_FOR_TODO}): needs implementing'\\n\", t.Name())",
      "$0"
    ],
    "description": "Snippet for t.Skipf() with testing.t.Name() inserted and a TODO"
  }
}
